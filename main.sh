#!/bin/sh
set -euo pipefail

#
# main.sh
#

# source first arg as a config file if it is passed
if [ -f "${1:-/}" ]; then
	if ! (sh -c ". '$1'"); then
		echo "$1 does not seem like a valid config file."
		exit 1
	fi
	. "$1"
fi

# check if all config variables exist
missing_vars=no
for var in src_dir \
		src_use_git \
		src_reset_rebuild \
		src_branch \
		gcc_native_version \
		shim_dir \
		ovmf_plat \
		ovmf_target; do
	if [ -z "$(eval echo \${$var:-})" ]; then
		echo "missing config variable: $var"
		missing_vars=yes
	fi
done

if [ "$missing_vars" = yes ]; then
	exit 1
fi

#! internal things start here, do not touch!
lowercase()
{
	if [ "$*" ]; then
		echo "$*" | dd conv=lcase 2>/dev/null
	else
		dd conv=lcase 2>/dev/null
	fi
}

uppercase()
{
	if [ "$*" ]; then
		echo "$*" | dd conv=ucase 2>/dev/null
	else
		dd conv=ucase 2>/dev/null
	fi
}

reset_git_repo()
{
	if [ -z ${1:-} ]; then
		echo "No."
		exit 1
	fi

	rm -rf "$1/*"
	git --git-dir="$1/.git" --work-tree="$1" reset --hard HEAD || return 1
	git --git-dir="$1/.git" --work-tree="$1" clean -fd || return 1
}

# adding dependencies and flags
echo "setting platform variables" 1>&2
echo "==========================" 1>&2
. ./platform.inc.sh
# leftover error handling, not very used anymore because of set -e
if [ "$?" != 0 ]; then
	if [ -z "${err:-}" ]; then
		err="unknown (check log)"
	fi
	echo "error on: '$err'"
	exit 1
fi
unset err # just in case

echo 1>&2
echo "checking for dependencies" 1>&2
echo "=========================" 1>&2
missing_dep=0
for dep in $dependencies; do
	if pkg query %n $dep >/dev/null; then
		echo "found dependency: $dep" 1>&2
	else
		echo "missing dependency: $dep" 1>&2
		missing_dep=1
	fi
done
if [ "$missing_dep" = 1 ]; then
	echo 1>&2
	echo "error on: dependencies" 1>&2
fi
echo

#
# fetch the sources
#
use_git="$(lowercase $src_use_git)"
if [ "$use_git" != yes ] && [ "$use_git" != no ]; then
	echo "error on: use_git" 1>&2
fi

# messy switch case for determining what to do with the sources
## src dir exists? :: git dir exists? :: using git?
mess="$([ -d "$src_dir" ]&&echo -n yes||echo -n no)::$([ -d "$src_dir/.git" ]&&echo -n yes||echo -n no)::$src_use_git"
case "$mess" in
	yes::yes::yes)
		if [ "$src_reset_rebuild" = yes ]; then
			reset_git_repo "$src_dir" || err="reset_git_repo"
		fi
	;;
	yes::no::yes)
		echo "error: using git but edk2 sources were fetched without git." 1>&2
		err="src"
	;;
	no::*::yes)
		if ! git clone --branch "$src_branch" --depth=1 --recursive https://github.com/tianocore/edk2 "$src_dir"; then
			err="git clone"
		fi
	;;
	*)
		: # do nothing
	;;
esac
if [ "${err:-}" ]; then
	echo "error on: '$err'"
	exit 1
fi

#
# BUILD
#

# we create a bash build script with all of our variables here, then run it
cat << EOL > "$src_dir/bash_build.sh"
#!/usr/bin/env bash
# AUTOGENERATED BUILD SCRIPT. MODIFY 'settings.inc.sh' INSTEAD.
set -e

export PATH="$shim_dir:\$PATH"

if [ "\$PWD" != "$src_dir" ]; then
	cd "$src_dir"
fi

# make -C BaseTools -j\$(nproc) clean
make -C BaseTools -j\$(nproc)

source edksetup.sh

# build -a "$ovmf_arch" -p "$ovmf_platfile" $ovmf_args -t GCC clean
build -a "$ovmf_arch" -p "$ovmf_platfile" $ovmf_args -t GCC
EOL
chmod +x "$src_dir/bash_build.sh"

bash "$src_dir/bash_build.sh"

if [ -d output ]; then
	rm -rf output
	mkdir output
else
	mkdir output
fi

if [ "$ovmf_result" ]; then
	in="$src_dir/Build/$ovmf_result"
	out="output/${ovmf_filename:-$ovmf_result}"
	cp "$in" "$out"
	echo "copied OVMF EFI to $out" 1>&2
fi

if [ "$ovmf_result_code" ]; then
	in="$src_dir/Build/$ovmf_result_code"
	out="output/${ovmf_filename_code:-$ovmf_result_code}"
	cp "$in" "$out"
	echo "copied OVMF CODE to $out" 1>&2
fi

if [ "$ovmf_result_vars" ]; then
	in="$src_dir/Build/$ovmf_result_vars"
	out="output/${ovmf_filename_vars:-$ovmf_result_vars}"
	cp "$in" "$out"
	echo "copied OVMF VARS to $out" 1>&2
fi
